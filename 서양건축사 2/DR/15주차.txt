1211 멀티테스킹
이제 본격적인 시험기간이 시작되면서 급격히 하는 일이 늘어나게 되었다. 설계 관련 작업들은 물론이고 다움주에 있을 시험들의 공부, 3개정도 있는 큰 과제까지 앞으로의 2주가 이번학기 전체를 압축하고 있다고 봐도 과장이 아닐 것이다. 심지어 나는 개인 작업도 따로 진행하고있기 때문에 가끔씩 작업확인이나 질문관련 연락이 오기도 한다. 그런데 이 모든걸 순차적으로 해결하는 것은 현실적으로 무리가 있다. 무언가는 포기하거나 멀티테스킹이 필수적으로 요구되는 상황에서 나는 잘 하진 못해도 멀티테스킹을 최대한 하면서 놓치는 것이 없도록 해보기로 했다. 그런데 첫번째 부터 문제가 생겼다. 설계 모형을 만들 때 나는 집에 있는 3D 프린터를 이용하는데, 갑짜기 이 프린터에 문제가 생기면서 제대로 출력이 되지 않기 시작했다. 3D 프린터로 계단이나 장식같은 복잡한 것들을 출력하면서 도면과 렌더링을 마무리하는 것이 기존의 계획이었는데 3D 프린터를 수리하는데에 너무 많은 시간을 낭비해버리며 계획의 첫단추가 흔들리기 시작했다. 오늘 그렇게 결국 목표로 한 도면의 완성은 커녕 1개의 도면을 겨우 완성해냈다. 3D 프린터는 불안불안 하지만 그래도 다시 출력을 시작했다. 이렇게 갑짜기 일이 몰리면서 멀티테스킹을 할 때는 무언가 문제가 생겨도 침착하게 해결해야 한다는 것을 누구보다 잘 알고있다. 이걸 실천하는건 알고있는 것과 별개의 문제이고 첫날인 오늘부터 벌써 불안불안 하지만 아마 앞으로 잘 해낼 수 있을 것이다.

1212 머피의 법칙
어제부터 본격적으로 시험기간을 시작했는데, 3D 프린터의 고장이 벌써부터 발목을 묶었었다. 직접 3D 프린터를 수리하면서 늦은밤이 되서야 겨우 다시 출력을 시작시킬 수 있었는데, 오늘 아침에 확인한 결과물은 참담했다. 3D 프린터는 일정 이상 출력이 진행되면 이후에는 크게 문제가 발생하지 않을 확률이 크다. 즉, 초반만 잘 넘기면 이후에는 안심하고 다른 일을 해도 된다는 것이다. 이 것을 이용해서 나는 도면 1개를 완성시켰고 숙면을 취했다. 하지만 3D 프린터는 중간에 갑짜기 알 수 없는 문제를 일으켰고 아침에 확인한 결과 필라멘트가 마치 폭발하듯이 엉켜있엇다. 일어나자마자 3D 프린터를 청소하고 문제의 원인을 파악해봤는데, 도저히 이유를 알 수가 없었다. 결국 어제와 똑같이 3D 프린터의 출력 밑판이 약간 휘었다는 결론을 냈다. 그래도 다시 출력을 걸었을 때 그동안 보였던 것중 가장 괜찮은 스타트를 끊었고 나는 안심하고 학교에 갈 수 있었다. 집에 돌아와서 확인한 결과물은 100% 완벽하진 않았지만 그래도 봐줄만한 것이었다. 이렇듯 평소에는 문제없이 작동하던 것들이 급할 때 갑짜기 문제를 일으키는 것 같은 현상을 흔히 머피의 법칙이라 부른다. 나에게도 이번에 여러 머피의 법칙이 발생했는데, 기계의 고장을 시작으로 갑짝스럽게 시작된 개인 작업팀의 집중 작업기간, 태양을 기준으로 진행해야 하는 실험과제를 방해하듯이 일주일 내내 흐린 날씨, 갑짜기 주말에 잡혀버린 가족행사 까지, 이제는 내가 이번 시련을 잘 해쳐나갈 수 있을지 의문이 생기기 시작했다. 하지만 이런 부정적인 생각은 더욱 실패를 앞당기는 법이니 묵묵히 긍정적인 마인드로 이번 시련을 최대한 해쳐나가야겠다.

1213 멀티게임과 싱글게임
게임을 좋아하는 사람들은 각자가 선호하는 플레이 환경이 있기 마련이다. 누군가는 사람들과 함께 하는 멀티게임을 좋아할 수도 있고 누군가는 혼자서 진득하게 즐기는 싱글게임을 좋아할 수도 있다. 하지만 개발자의 입장에선 멀티게임은 싱글게임에 비해 너무나도 많은 리스크를 가진 형태이다. 하지만 그만큼 매력적인 분야임에는 틀림없다. 오늘은 개발자의 입장에서 멀티게임 개발과 싱글게임 개발의 차이에 대해 알아보고자 한다. 멀티와 싱글의 가장 큰 차이는 무엇일까? 바로 사람의 수이다. 사람의 수가 1명일 때는 그 사람의 컴퓨터에서만 동작하는 게임을 만들면 되기 때문에 프로그래밍에서도 좀 더 복잡한 기능을 구현할 수 있고 그래픽적인 부담도 적어진다. 하지만 사람의 수가 2명 이상이 되는순간 개개인의 컴퓨터에서 같은 화면을 보여주어야 하기 때문에 프로그래밍과 그래픽에서 제약이 생기기 시작한다. 멀티를 구현하는 방법은 크게 2가지가 있다. 컴퓨터와 컴퓨터가 서로 직접 연결과는 방법, 컴퓨터와 컴퓨터가 서버를 통해 연결되는 방법이 있다. 하지만 서로 직접 연결하는 방식은 서로 같은 회선을 쓰고있어야하는 등 제약사항이 많기 때문에 일반적으론 서버를 통한 방법을 사용한다. 이게 바로 멀티게임 개발의 첫번째 난관인 서버통신 문제이다. 사람들이 접속해도 문제가 생기지 않는 안정적인 서버를 직접 구축하는 것은 매우 어렵기 때문에 서버비를 지불하고 대형 서버의 일부를 사용하거나 대규모 기업의 경우 직접 서버실을 두어 대형 서버를 운용한다. 하지만 서버만 있다고 해결할 수 있는 문제는 아니다. 안정적인 서버가 있어도 접속자 수가 지나치게 많아지면 트래픽을 버티지 못하고 서버가 다운될 수도 있다. 그래서 이 문제를 해결하기 위해 개발자들은 최대한 코드를 단순하게 최적화시키고 그래픽 퀄리티에 한도가 생긴다. 이런 개발적인 문제 때문에 싱글게임을 개발하는 것보다 멀티게임을 개발하는 것이 약 5~10배의 비용이 들어간다고 한다. 그리고 개발이 잘 되었다고 해도 사후관리만 하면 되는 싱글게임과 달리 멀티게임은 지속적인 운영와 업데이트가 필요하기에 추가비용이 계속 들어가게 된다. 하지만 이런 모든 단점을 가지고도 멀티게임을 개발하는 이유는 하나일 것이다. 바로 멀티게임이 가진 포텐셜이다. 싱글게임은 구조적 특성상 끝이 존재한다. 하지만 멀티게임은 끝이라는 개념이 존재하지 않고 사람과 사람의 관계에서 무한히 많은 가능성이 생겨날 수 있다. 이런 과정 속에서 한번 크게 대박이 난다면 콜라보, e스포츠, ip사업 등 기업 입장에선 황금알을 낳는 거위를 얻게 된다는 점에서 멀티게임의 개발을 멈추지 않는다. 나는 지금은 명작으로 평가받을 수 있는 싱글게임을 만들어보는게 목표이지만 언젠가 많은 사람들에게 큰 사랑을 받는 멀티게임을 기획하고 만들고 운영해보고 싶다.

1214 노조
회사에서 일하는 사람들에게 노조는 어떤 의미를 가질까? 본인의 권리를 지켜주는 버팀목, 회사와의 대화과정에서 당당하게 나갈 수 있게 해주는 든든한 뒷배일 것이다. 이런 노조에 관해서 나는 원래 그렇게 좋은 이미지를 가지고있지는 않았다. 왜냐하면 일반인들에게 어떤 기업의 노조가 가장 직접적으로 드러나는 사건을 파업일텐데, 이게 소비자의 입장에선 이득될 것이 없기 때문이다. 대표적으로 지하철 파업으로 인해 차간간격이 늘어나서 피해를 보는 경우가 있다. 하지만 최근 내가 관심을 가지고있던 회사에서 큰 이슈가 발생하면서 그 회사의 노조가 수면위로 떠올랐는데, 내가 생각했던 것보다 정반대의 좋은 모습이 보여졌다. 바로 국내 최대의 게임사, 넥슨의 노조이다. 흔히 개발자들에 대한 이미지는 퇴근이 늦고 필요에 따라서 쉽게 잘리고 회사를 이동하는 직업이다. 하지만 넥슨 노조위원장의 인터뷰를 통해 노조 측에서 주52시간을 초과하는 업무량을 억제하고 권고사직을 막아주는 이야기를 들었다. 이번에 외주관련 이슈가 발생하면서 넥슨 직원들이 밤낮없이 외주작업물을 전수조사하고 있는데, 이 때 노조에서는 주 52시간 근무를 초과하진 않는지 확실하게 감시하고 있다고 한다. 그리고 게임 개발자들은 팀이 사라지는 경험을 어렵지않게 할 수 있는데, 이 때 팀원들은 대부분 회사를 나가야하는 경우가 대부분이다. 그런데 넥슨 노조에선 이런 직원들이 해고되지 않게 보호하고 다른 팀에 합류할 수 있게 도운다고 한다. 미래의 회사생활을 지금도 꿈꾸고있는 나에게 이런 노조위원장의 인터뷰는 상상만 해도 든든하고 안심하고 개발에 집중할 수 있는 환경이 그려지는 기반이 되었다. 넥슨 노조는 우리나라는 물론이고 세계최초로 게임업계에서 생겨난 노동조합이라고 한다. 지금은 넥슨을 시작으로 여러 게임사에서 노조가 생겨났고 앞으로도 더욱 많은 게임사에 노조가 생겨날 것이다. 언젠가 내가 취업준비생으로써 사회에 첫걸음을 내딛을 때에는 업계 전반에 노조가 자리잡아 작업자가 안심하고 업무를 할 수 있는 환경이 조성되면 좋겠다.

1215 경험의 힘
이번 설계 강의에서 나는 다른 학우들에 비해 상당히 진도가 느렸다. 컨셉 단계에서 오랬동안 해메기도 했고 개인 작업에 잠시 집중하느라 학교 작업이 느려진 것도 이유일 것이다. 그래서 중평 때는 다들 단위전시공간을 모형화 했을 때 나는 컨셉모형을 제작해서 발표를 진행했다. 그리고 이번주, 종평이 다가올 때가 되서야 나는 도면 작업을 본격적으로 시작했다. 그래서 나 스스로도 이번주에 도면, 모델링, 모형을 모두 완성하고 발표자룔 만들어서 잘 발표할 수 있을지 확신이 없었다. 그런데 화요일에 마지막으로 작업을 체크받았을 때 완성해간 도면 1개가 수정사항 없음이라는 판결을 듣게 되었다. 이 판결은 내 자신감에 불을 붙여주었는데, 도면의 수준에 대한 기준이 생기면서 다른 도면들을 빠르게 만들어낼 수 있게 되었기 때문이다. 그렇게 예상처럼 나는 도면과 모형, 모델링을 모두 완성시켰고 발표자료도 완성되었다. 지금 이 글을 발표 전 새벽에 쓰고있기 때문에 평가가 어떻게 나올지는 알 수 없지만 확실하게 최선을 다했기 때문에 후회없이 평가발을 수 있다. 무엇보다 발표는 자신있고 말이다. 다른 학우들이 도면을 계속 지적받고 수정하고 있을 때 한번에 도면이 통과된 것은 정말로 다행이라고 할 수 있다. 아마 다른 학우들에 비해 2배인 건축 경력과 각종 자격증들이 도움이 됐던 것 같다. 그런데 문뜩 한가지 의문이 든다. 이번에 내가 경험의 힘을 다시한번 알게 되었는데, 좋은 건축물을 보기위한 노력은 나보다 다른 학우들이 훨씬 많이 하고있고 좋은 경험을 많이 쌓고있다. 그러면 언젠가 실력적인 평차가 사라졌을 때 데이터적인 경험이 차이를 만들어낼 것이다. 사실 지금도 차이가 발생하고 있는게, 나는 지금 내 설계가 다른 학우들에 비해 살짝 수준이 낮다고 생각하고 있다. 그러면 더욱 시간이 흘렀을 때 이 편차는 더욱 커질 것이다. 나는 건축을 업으로 할 생각이 없기 때문에 학교생활을 위해 건축과 관련된 경험을 쌓아야 할지, 내 진로를 위한 경험을 쌓아야 할지는 비율을 잘 조절해야 하겠지만, 한가지 확실한 것은 내가 앞으로 하고자하는 일들은 경험이 중요하다는 것이다. 좋은 경험, 나쁜 경험 모두 결국엔 나를 성장시키는 거름이 되는만큼 더 적극적으로 도전하고 부딛혀보는 것이 가장 중요하다는 사실을 깨닫게 되는 하루였다.

1216 디테일의 차이
무언가를 만들어내는 사람이라면 필연적으로 완성도에대한 욕심이 생기기 마련이다. 나의 경우에는 게임 개발에 있어서 완성도있는 작품을 만들고자 하는 욕심이 있다. 그렇기 때문에 완성도있는 작품을 발견하면 그 안에 숨어있는 디테일들을 집요하게 파보는 버릇이 있다. 게임의 경우에는 기획이 가장 디테일을 필요로하는 분야라고 개인적으로 생각하는데, 레벨디자인과 스토리 디자인이 가장 직접적으로 드러나는 디테일 요소이다. 레벨디자인은 맵의 구조, 캐릭터의 조작감, 적이 가지는 알고리즘, 게임 전반으로 돌아가는 시스템에 대한 고민들이 디테일이 되는데, 나는 이런 경우에서 하나의 키워드를 가지고 일관적으로 유지하는 것을 선호한다. 예를들면 최근에 내가 좋게 평가했던 '산나비'라는 게임에서 적의 등장 방식, 공격방식, 주인공 캐릭터의 전투방식 모두 화려하고 간결한 모습을 보여주었다. 그리고 맵의 디자인은 게임의 핵심 요소인 로프액션을 적극 활용하는 형태로 되어있었다. 이 것들은 모두 "빠른 이동"이라는 키워드 아래에서 설계된 것들이라고 할 수 있다. 산나비가 받는 악평들도 이 빠른 이동이라는 키워드를 제대로 활용하지 못한 반복적 퍼즐요소들에서 비롯된 경우가 대부분이다. 후에 알아보니 이 요소들은 외주업체를 통해 진행된 것이었는데, 다르게 바라보면 기획자의 디테일이 닿지 못한 부분이라고 할 수 있다. 그럼 스토리에선 어떤 것이 디테일이 될 수 있을까? 가장 기초가 되는 부분은 바로 설정이다. 스토리를 만들 때는 캐릭터와 게임 속 세계에 대한 설정을 가장 먼저 구상하게 된다. 하지만 게임을 만들면서 스토리를 전개하다보면 이 설정에 구멍이 생기거나 오류가 발생하기도 한다. 이 것이 가장 큰 디테일 요소이고 세부적으로 들어가면 스토리의 떡밥들도 중요한 요소이다. 스토리를 빌드업하는 과정에서 개발진은 게임 속 곳곳에 스토리에 대한 힌트를 던져둔다. 이 것이 직접적으로 글을 통해 전달될 수도 있고 간접적으로 전달될 수도 있다. 내가 선호하는 것은 간접적인 것이다. 배경에서 계속 눈에 밟히는 키워드, 배치된 요소들에 담긴 의미, 음악을 통해 은유적으로 표현하는 분위기 등 스토리가 중심이 되는 게임일수록 간접적인 요소들이 큰 힘을 발휘하는 경우가 크다. 그외에 프로그래밍은 사실 오류가 없고 최적화가 잘 된 것이 보이지 않는 디테일일 것이고, 그래픽과 사운드는 기획에서 요구한 것을 얼마나 잘 표현하느냐가 관건일 것이다. 나는 좋은 스토리 게임은 특별히 유도하지 않아도 2회차를 하게 만드는 게임이라고 생각한다. 그리고 2회차를 했을 때 분명히 달라지는 것은 없어도 알고 봤을 때와 모르고 봤을 때의 시야가 달라지는 게임이 정말 좋은 스토리라고 생각한다. 그리고 최대한 글이 적게 사용되면서도 자신의 의도를 시현시키는 기획자가 훌륭한 기획자라고 생각한다. 나도 지금은 힘들겠지만 이런 기획자를 꿈꾸고있는 만큼 가장 빠른 길은 지금처럼 명작들을 끊임없이 접하고 분석하면서 디테일을 내 것으로 만드는 것이라고 믿고있다. 가끔은 망작을 통해 절대 해선 안될 것을 배우기도 하고 말이다. 이 길을 따라가면서 언젠가는 내가 추구하는 훌륭한 기획자에 다다르길 오늘도 바라고있다.

1217 2D와 3D의 성향차이
무언가를 시각적으로 표현하는 것에 있어서 가장 첫번째 갈림길은 2D와 3D이다. 오늘은 2D작업과 3D작업의 차이를 내가 잘 아는 게임개발 분야를 통해서 알아보고자 한다. 먼저 그래픽 아티스트들에겐 이런말이 있다. "2D는 티가 않나야 잘 한 것이고, 3D는 티가 나야 잘 한 것이다." 이 말은 무엇을 의미할까? 2D, 즉 그림은 엄밀히 말했을 때 현실에서 볼 수 없는 것을 그려내는 분야이다. 그렇기 때문에 무언가를 서툰 실력을 가졌다면 결과물에서 위화감이 생기기 쉽다. 얼굴을 그릴 때 눈동자가 서로 다른 곳을 바라보고 있다던가 사람의 관절 구조상 절대 할 수 없는 자세가 대표적인 실수들이다. 그렇기 때문에 실력있는 작업자들은 2D를 보면서 마치 3D를 보는 것처럼 위화감이 없는 결과물들을 만들어 낸다. 즉, 대중들은 좋은 2D 작업물을 보면서 디테일을 신경쓰기보단 위화감을 먼저 느끼고, 이 위화감이 없는 작품들이 좋은 작품이라는 결론을 알 수 있다. 반면 3D는 실력이 그렇게 좋지 않아도 비율만 잘 맞는다면 위화감이 발생하지 않는다. 그래서 3D 작업자들은 사람들이 잘 신경쓰지 않는, 눈치채지 못하는 디테일을 최대한 신경쓰는 경향이 있다. 그렇기 때문에 이 디테일의 정도가 대중들에 눈에도 띌 수밖에 없고, 실력있는 작업자일수록 파도파도 디테일이 보이기 마련이다. 그렇기에 기본적인 위화감만 없앤다면 디테일들을 최대한 챙기는 것이 좋은 3D 작품이라고 할 수 있다. 그리고 게임환경이라는 특수한 환경으로 보았을 때도 차이가 있다. 오늘날에 컴퓨터는 2D 그래픽의 게임을 구동하는데 아무런 문제가 없다. 그래픽의 품질이 아무리 좋더라도 말이다. 이는 평면이라는 한계가 최고의 최적화 요소로 활용되기에 가능한 것이다. 하지만 3D는 작업자가 아무리 퀄리티가 좋은 3D 작업물을 만들어내도 그 오브젝트 하나만으로도 컴퓨터에 부하를 줄 수 있다. 그렇기 때문에 3D 게임을 개발하는데 있어서는 퀄리티와 최적화의 균형을 잘 맞추는 것이 중요하다. 이런 요소는 유저들에게도 직접적으로 영향을 주기 때문에 유저들은 최적화가 잘 된 환경과 퀄리티좋은 3D 모델링들을 동시에 마주했을 때 기본적으로 좋은 평가를 내리기 마련이다. 이런 특징들은 작업자들의 성향차이로도 이어지는데, 나는 2D보단 3D작업이 좀 더 취향에 맞는 것같다. 하지만 직접 작업하는 것이 아닌 기획하는 입장에 있다면 2D가 더 취향에 맞다. 이런 취향차이가 나에게 축복인지 저주인지는 좀 더 개발경험을 쌓아봐야 알 수 있지 않을까 싶다.