0918 최적화
건축을 하는 사람들에게 있어 최적화는 상당히 어색한 개념일 것이다. 오늘 이야기하고자 하는 최적화는 프로그램 내부에서 낭비되는 용량, 데이터들을 최대한 줄임으로써 사용자의 컴퓨터에 가하는 부담을 최대한 줄이는 작업을 말한다. 이 작업이 왜 건축을 하는 사람들에게 불필요할까? 일반적으로 건축에서 모델링하는 것들은 이미지의 형태로 캡쳐하여 사용하거나 잘 연동되는 프로그램을 통해 본인의 설계를 검증, 분석하는 용도로 사용된다. 그렇기 때문에 실시간 사용자를 고려할 필요성 자체가 없고 그저 더 좋은 퀄리티를 도출하기만 하면 되는 것이다. 하지만 이렇게 작업하는 것을 게임이나 메타버스에서도 그대로 사용하면 큰 낭패를 볼 수 있다. 높은 퀄리티의 모델링은 대체로 많은 폴리곤과 높은 퀄리티의 텍스쳐를 가지고있다. 이 것들이 한 공간에 뭉쳐서 빛과 함께 연산을 시작하면 컴퓨터에 엄청난 부담이 갈 수 있다. 일반적으론 건축에서 이러한 과정을 렌더링이라고 부르지만 이는 실시간 사용자들에게 큰 부담으로 다가온다. 이 것을 깨닫게 된 때는 최근에 개인작업에서 팀원들과 테스트하던 때였다. 내가 만든 월드에 vr과 추가 트래킹 장비를 착용한 팀원이 테스트 목적으로 접속하려 했지만 모델링의 최적화, 기능의 최적화가 전혀 되어있지 않는 바람에 점속 자체가 되지 않는 사태가 벌어졌다. 실제 사용되는 과정에선 팀원과 비슷한 세팅의 사람들이 훨씬 많이 접속해야 했으므로 갑짜기 최적화가 최우선 과제로 떠올랐고 이 과정에서 내가 만들었던 여러 요소들이 컴퓨터에 불필요한 부하를 걸고 있었다는 것을 알게 되었다. 최적화에 영향을 주는 요소를 조금 이야기해보자면 우선 아까 이야기했던 모델링 폴리곤 수의 문제가 있다. 폴리곤이 많으면 당연하게도 연산하는 양이 늘어나게 되고 빛이나 충돌처리를 생각하면 연산량이 기하급수적으로 늘어난다. 그래서 이걸 최적화하기 위한 기법이 바로 텍스쳐의 노말맵을 적극 활용하는 것이다. 노말맵은 모델링만으론 표현하기 힘든 디테일한 굴곡, 질감 등을 표현하기 위해 텍스쳐에 들어있는 기능이다. 이 기능을 이용해서 하이폴리로 모델링한 것을 노말맵의 형태로 출력하고 로우폴리 모델링에 입히는 방식으로 최적화 한다고 한다. 그리고 폴리곤 수만큼 최적화에 영향을 주는 것이 텍스쳐의 해상도와 빛의 연산인데 텍스쳐의 해상도는 필요한 만큼 적당하게 조절해서 사용하면 어느정도 해결할 수 있지만 빛의 연산은 특수한 기능을 사용하지 않는 이상 쉽게 최적화 할 수 없다. 이 연산 방법은 베이킹이라고 부르는 것인데 이미 배치된 빛이 오브젝트에 주는 영향을 사전에 계산하여 오븐에 굽듯이 라이트 맵의 형태로 출력하는 것이다. 이렇게 하게되면 굳이 움직이지 않는 빛을 실시간으로 계속 연산할 필요가 없어지고 당연하게도 컴퓨터에 가하는 부담이 적어지게 된다. 이걸 이외에도 여러가지 최적화 기법들이 존재하지만 아직 최적화에 10%도 모르는 나에게 있어 최적화는 오랜기간 해결해야할 숙제와 같은 것이다. 

0919 


0920 


0921 


0922 


0923 


0924 
